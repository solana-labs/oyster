/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from 'ethers';
import { Listener, Provider } from 'ethers/providers';
import { Arrayish, BigNumber, BigNumberish, Interface } from 'ethers/utils';
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from '.';

interface WormholeInterface extends Interface {
  functions: {
    consumedVAAs: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    guardian_set_expirity: TypedFunctionDescription<{ encode([]: []): string }>;

    guardian_set_index: TypedFunctionDescription<{ encode([]: []): string }>;

    guardian_sets: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    isWrappedAsset: TypedFunctionDescription<{ encode([]: [string]): string }>;

    wrappedAssetMaster: TypedFunctionDescription<{ encode([]: []): string }>;

    wrappedAssets: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    getGuardianSet: TypedFunctionDescription<{
      encode([idx]: [BigNumberish]): string;
    }>;

    submitVAA: TypedFunctionDescription<{ encode([vaa]: [Arrayish]): string }>;

    parseAndVerifyVAA: TypedFunctionDescription<{
      encode([vaa]: [Arrayish]): string;
    }>;

    lockAssets: TypedFunctionDescription<{
      encode([asset, amount, recipient, target_chain, nonce, refund_dust]: [
        string,
        BigNumberish,
        Arrayish,
        BigNumberish,
        BigNumberish,
        boolean,
      ]): string;
    }>;

    lockETH: TypedFunctionDescription<{
      encode([recipient, target_chain, nonce]: [
        Arrayish,
        BigNumberish,
        BigNumberish,
      ]): string;
    }>;
  };

  events: {
    LogGuardianSetChanged: TypedEventDescription<{
      encodeTopics([oldGuardianIndex, newGuardianIndex]: [
        null,
        null,
      ]): string[];
    }>;

    LogTokensLocked: TypedEventDescription<{
      encodeTopics([
        target_chain,
        token_chain,
        token_decimals,
        token,
        sender,
        recipient,
        amount,
        nonce,
      ]: [
        null,
        null,
        null,
        Arrayish | null,
        Arrayish | null,
        null,
        null,
        null,
      ]): string[];
    }>;
  };
}

export class Wormhole extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Wormhole;
  attach(addressOrName: string): Wormhole;
  deployed(): Promise<Wormhole>;

  on(event: EventFilter | string, listener: Listener): Wormhole;
  once(event: EventFilter | string, listener: Listener): Wormhole;
  addListener(eventName: EventFilter | string, listener: Listener): Wormhole;
  removeAllListeners(eventName: EventFilter | string): Wormhole;
  removeListener(eventName: any, listener: Listener): Wormhole;

  interface: WormholeInterface;

  functions: {
    consumedVAAs(
      arg0: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<boolean>;

    'consumedVAAs(bytes32)'(
      arg0: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<boolean>;

    guardian_set_expirity(overrides?: TransactionOverrides): Promise<number>;

    'guardian_set_expirity()'(
      overrides?: TransactionOverrides,
    ): Promise<number>;

    guardian_set_index(overrides?: TransactionOverrides): Promise<number>;

    'guardian_set_index()'(overrides?: TransactionOverrides): Promise<number>;

    guardian_sets(
      arg0: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<number>;

    'guardian_sets(uint32)'(
      arg0: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<number>;

    isWrappedAsset(
      arg0: string,
      overrides?: TransactionOverrides,
    ): Promise<boolean>;

    'isWrappedAsset(address)'(
      arg0: string,
      overrides?: TransactionOverrides,
    ): Promise<boolean>;

    wrappedAssetMaster(overrides?: TransactionOverrides): Promise<string>;

    'wrappedAssetMaster()'(overrides?: TransactionOverrides): Promise<string>;

    wrappedAssets(
      arg0: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<string>;

    'wrappedAssets(bytes32)'(
      arg0: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<string>;

    getGuardianSet(
      idx: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<{
      keys: string[];
      expiration_time: number;
      0: string[];
      1: number;
    }>;

    'getGuardianSet(uint32)'(
      idx: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<{
      keys: string[];
      expiration_time: number;
      0: string[];
      1: number;
    }>;

    submitVAA(
      vaa: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    'submitVAA(bytes)'(
      vaa: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    parseAndVerifyVAA(
      vaa: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<{
      version: number;
      hash: string;
      guardian_set_index: number;
      timestamp: number;
      action: number;
      payload: string;
      0: number;
      1: string;
      2: number;
      3: number;
      4: number;
      5: string;
    }>;

    'parseAndVerifyVAA(bytes)'(
      vaa: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<{
      version: number;
      hash: string;
      guardian_set_index: number;
      timestamp: number;
      action: number;
      payload: string;
      0: number;
      1: string;
      2: number;
      3: number;
      4: number;
      5: string;
    }>;

    lockAssets(
      asset: string,
      amount: BigNumberish,
      recipient: Arrayish,
      target_chain: BigNumberish,
      nonce: BigNumberish,
      refund_dust: boolean,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    'lockAssets(address,uint256,bytes32,uint8,uint32,bool)'(
      asset: string,
      amount: BigNumberish,
      recipient: Arrayish,
      target_chain: BigNumberish,
      nonce: BigNumberish,
      refund_dust: boolean,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    lockETH(
      recipient: Arrayish,
      target_chain: BigNumberish,
      nonce: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    'lockETH(bytes32,uint8,uint32)'(
      recipient: Arrayish,
      target_chain: BigNumberish,
      nonce: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;
  };

  consumedVAAs(
    arg0: Arrayish,
    overrides?: TransactionOverrides,
  ): Promise<boolean>;

  'consumedVAAs(bytes32)'(
    arg0: Arrayish,
    overrides?: TransactionOverrides,
  ): Promise<boolean>;

  guardian_set_expirity(overrides?: TransactionOverrides): Promise<number>;

  'guardian_set_expirity()'(overrides?: TransactionOverrides): Promise<number>;

  guardian_set_index(overrides?: TransactionOverrides): Promise<number>;

  'guardian_set_index()'(overrides?: TransactionOverrides): Promise<number>;

  guardian_sets(
    arg0: BigNumberish,
    overrides?: TransactionOverrides,
  ): Promise<number>;

  'guardian_sets(uint32)'(
    arg0: BigNumberish,
    overrides?: TransactionOverrides,
  ): Promise<number>;

  isWrappedAsset(
    arg0: string,
    overrides?: TransactionOverrides,
  ): Promise<boolean>;

  'isWrappedAsset(address)'(
    arg0: string,
    overrides?: TransactionOverrides,
  ): Promise<boolean>;

  wrappedAssetMaster(overrides?: TransactionOverrides): Promise<string>;

  'wrappedAssetMaster()'(overrides?: TransactionOverrides): Promise<string>;

  wrappedAssets(
    arg0: Arrayish,
    overrides?: TransactionOverrides,
  ): Promise<string>;

  'wrappedAssets(bytes32)'(
    arg0: Arrayish,
    overrides?: TransactionOverrides,
  ): Promise<string>;

  getGuardianSet(
    idx: BigNumberish,
    overrides?: TransactionOverrides,
  ): Promise<{
    keys: string[];
    expiration_time: number;
    0: string[];
    1: number;
  }>;

  'getGuardianSet(uint32)'(
    idx: BigNumberish,
    overrides?: TransactionOverrides,
  ): Promise<{
    keys: string[];
    expiration_time: number;
    0: string[];
    1: number;
  }>;

  submitVAA(
    vaa: Arrayish,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  'submitVAA(bytes)'(
    vaa: Arrayish,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  parseAndVerifyVAA(
    vaa: Arrayish,
    overrides?: TransactionOverrides,
  ): Promise<{
    version: number;
    hash: string;
    guardian_set_index: number;
    timestamp: number;
    action: number;
    payload: string;
    0: number;
    1: string;
    2: number;
    3: number;
    4: number;
    5: string;
  }>;

  'parseAndVerifyVAA(bytes)'(
    vaa: Arrayish,
    overrides?: TransactionOverrides,
  ): Promise<{
    version: number;
    hash: string;
    guardian_set_index: number;
    timestamp: number;
    action: number;
    payload: string;
    0: number;
    1: string;
    2: number;
    3: number;
    4: number;
    5: string;
  }>;

  lockAssets(
    asset: string,
    amount: BigNumberish,
    recipient: Arrayish,
    target_chain: BigNumberish,
    nonce: BigNumberish,
    refund_dust: boolean,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  'lockAssets(address,uint256,bytes32,uint8,uint32,bool)'(
    asset: string,
    amount: BigNumberish,
    recipient: Arrayish,
    target_chain: BigNumberish,
    nonce: BigNumberish,
    refund_dust: boolean,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  lockETH(
    recipient: Arrayish,
    target_chain: BigNumberish,
    nonce: BigNumberish,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  'lockETH(bytes32,uint8,uint32)'(
    recipient: Arrayish,
    target_chain: BigNumberish,
    nonce: BigNumberish,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  filters: {
    LogGuardianSetChanged(
      oldGuardianIndex: null,
      newGuardianIndex: null,
    ): EventFilter;

    LogTokensLocked(
      target_chain: null,
      token_chain: null,
      token_decimals: null,
      token: Arrayish | null,
      sender: Arrayish | null,
      recipient: null,
      amount: null,
      nonce: null,
    ): EventFilter;
  };

  estimate: {
    consumedVAAs(
      arg0: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    'consumedVAAs(bytes32)'(
      arg0: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    guardian_set_expirity(overrides?: TransactionOverrides): Promise<BigNumber>;

    'guardian_set_expirity()'(
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    guardian_set_index(overrides?: TransactionOverrides): Promise<BigNumber>;

    'guardian_set_index()'(
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    guardian_sets(
      arg0: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    'guardian_sets(uint32)'(
      arg0: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    isWrappedAsset(
      arg0: string,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    'isWrappedAsset(address)'(
      arg0: string,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    wrappedAssetMaster(overrides?: TransactionOverrides): Promise<BigNumber>;

    'wrappedAssetMaster()'(
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    wrappedAssets(
      arg0: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    'wrappedAssets(bytes32)'(
      arg0: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    getGuardianSet(
      idx: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    'getGuardianSet(uint32)'(
      idx: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    submitVAA(
      vaa: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    'submitVAA(bytes)'(
      vaa: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    parseAndVerifyVAA(
      vaa: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    'parseAndVerifyVAA(bytes)'(
      vaa: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    lockAssets(
      asset: string,
      amount: BigNumberish,
      recipient: Arrayish,
      target_chain: BigNumberish,
      nonce: BigNumberish,
      refund_dust: boolean,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    'lockAssets(address,uint256,bytes32,uint8,uint32,bool)'(
      asset: string,
      amount: BigNumberish,
      recipient: Arrayish,
      target_chain: BigNumberish,
      nonce: BigNumberish,
      refund_dust: boolean,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    lockETH(
      recipient: Arrayish,
      target_chain: BigNumberish,
      nonce: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    'lockETH(bytes32,uint8,uint32)'(
      recipient: Arrayish,
      target_chain: BigNumberish,
      nonce: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;
  };
}
